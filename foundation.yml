AWSTemplateFormatVersion: 2010-09-09
Resources:
# --------------------NETWORK-----------------------------------------------------
  # creating the VPC
  BATTLEGRP:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.10.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Join 
            - ''
            - - !Ref 'AWS::StackName'
              - '-VPC'
    
  # making a hole
  SLIPSPACERUPTURE:
    Type: 'AWS::EC2::InternetGateway'
    DependsOn: BATTLEGRP

  #connecting the gateway to the VPC  
  COORDINATESLOCK:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref BATTLEGRP
      InternetGatewayId: !Ref SLIPSPACERUPTURE
    
  # subnet one
  UNSCPILLAROFAUTUMN:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref BATTLEGRP
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.10.0.0/17
      MapPublicIpOnLaunch: true
      
  # subnet two
  UNSCSPIRITOFFIRE:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref BATTLEGRP
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.10.128.0/17
      MapPublicIpOnLaunch: true 

  # PublicRouteTable, or data packet with navigational data for battlegroup
  NAVDATA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref BATTLEGRP

  # default public route, or specifics for getting through the slipspace portal
  TELEMETRY:
    Type: AWS::EC2::Route
    DependsOn: COORDINATESLOCK
    Properties:
      RouteTableId: !Ref NAVDATA
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref SLIPSPACERUPTURE

  # public subnet 1 route table association, or creating a packet of NAVDATA for the ship (subnet)
  NAVDATAPOA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NAVDATA
      SubnetId: !Ref UNSCPILLAROFAUTUMN

  # public subnet 2 route table association, or creating a packet of NAVDATA for the ship (subnet)
  NAVDATASOF:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NAVDATA
      SubnetId: !Ref UNSCSPIRITOFFIRE

  #------------------------------------------------------------------------------------------------------------------------

  # like armour, we're going decide what stays in and what stays out. For demo purposes, all is fair game
  MJOLNIR:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: mjolnir-sg
      GroupDescription: lock it down SPARTAN
      VpcId: !Ref BATTLEGRP
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
  
  # the set of configs for each new instance
  UNSCTASKINGORDERS:
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateName: !Sub '${AWS::StackName}-launchTemplate4ASG'
      LaunchTemplateData:
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: true
            DeleteOnTermination: true
            Groups:
              - !Ref MJOLNIR
        ImageId: ami-0f9fc25dd2506cf6d
        InstanceType: t2.micro
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            amazon-linux-extras install nginx1.12
            nginx -v
            systemctl start nginx
            systemctl enable nginx
            chmod 2775 /usr/share/nginx/html
            instAZ=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone)
            echo -e "<head><style>body {background-image: url("https://free4kwallpapers.com/uploads/originals/2020/05/06/-halo-infinite-wallpaper.jpg");background-repeat: no-repeat;background-attachment: fixed;background-size: cover;}p {color: #32a852;}</style></head><body><center><h1><p>Welcome to vyprTECH HQ! We are currently in Availability Zone: AZID</p></h1><img src="https://live.staticflickr.com/65535/52008997046_15bcd36566_o.png" alt="programmer avatar" width="200" height="350"></center></body>" >> /usr/share/nginx/html/index.txt
            sed "s/AZID/$instAZ/" /usr/share/nginx/html/index.txt > /usr/share/nginx/html/index.html
        # temp commenting out to attempt resolving "when a network interface is provided, the security groups must be a part of it"
        #SecurityGroupIds: 
        #  - !Ref MJOLNIR
    
  # controls the deployment of assets
  FLEETCOM:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref UNSCTASKINGORDERS
        Version: !GetAtt UNSCTASKINGORDERS.LatestVersionNumber
      MaxSize: '5'
      MinSize: '2'
      DesiredCapacity: '2'
      VPCZoneIdentifier: 
        - !Ref UNSCPILLAROFAUTUMN
        - !Ref UNSCSPIRITOFFIRE
      MetricsCollection:
        - Granularity: 1Minute
  
  # policy that keeps things cool
  COREMELTDOWN:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref FLEETCOM
      ScalingAdjustment: '1'
   
  # if cpu goes above 80% call for reinforcements
  PROXIMITYALERT:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '80'
      AlarmDescription: Alarm if CPU higher than 80%
      Period: '60'
      AlarmActions:
        - !Ref COREMELTDOWN
      Namespace: AWS/EC2
      Dimensions:
        - Name: AutoScalingGroupName
          Value:
            Ref: FLEETCOM
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization
# this will be something I try at a later time
#Outputs:
#  SVCTAG:
#    Description: URL of the test site
#    Value: !Join 
#      - ''
#      - - 'http://'
#        - !GetAtt
#          - FLEETCOM
#          - DNSName 
